<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tarjan on Hellohy</title>
    <link>https://hellohy.github.io/tags/tarjan/</link>
    <description>Recent content in Tarjan on Hellohy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 22 Mar 2018 02:06:29 +0000</lastBuildDate>
    
	<atom:link href="https://hellohy.github.io/tags/tarjan/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>javascript实现Tarjan算法寻找有向图的强连通分量</title>
      <link>https://hellohy.github.io/posts/tarjan/</link>
      <pubDate>Thu, 22 Mar 2018 02:06:29 +0000</pubDate>
      
      <guid>https://hellohy.github.io/posts/tarjan/</guid>
      <description>javascript实现Tarjan算法寻找有向图的强连通分量
本文将介绍如何用javascript实现Tarjan算法来寻找图的强连通分量，在此之前，会简单介绍一些图的定义，图的邻接表和邻接矩阵表示法，图的两种遍历方法，在解决问题的时候如何选用正确的数据结构来表示图
目录  有关图的一些定义 图的表示 图的遍历 Tarjan算法  有关图的一些定义 图由边的集合和顶点的集合组成
强连通：在有向图中，如果两个顶点之间有路径，则称该两点是强连通的
强连通图：在有向图中，任意两个顶点都是强连通的
强连通分量：有向图的极大连通子图，称为强连通分量
图的表示 对于图G(V,E)，有以下定义 稀疏图：边的条数|E|远远小于$$|V|^2$$ 稠密图：边的条数|E|接近$$|V|^2$$
假设对于图G, 节点和边如下图:
转化为计算机语言，一般有两种表示方式，邻接链表和邻接矩阵。
邻接链表 由包含|V|条链表的的数组Adj构成 结构如下： 0 -&amp;gt; [1, 2] 1 -&amp;gt; [2] 2 -&amp;gt; []
空间复杂度o(V+E)
优点：鲁棒性高，可以通过简单的修改来表示一些图的其他变种
缺点：无法快速判断两个节点u、v之间是否存在一条边，只能通过链表Adj[u]来搜索v节点
ps:链表和数组很相似，在javascript中，数组是基于对象实现的，与其他语言(java、c++)的数组相比是非常低效的。在很多编程语言中，数组的长度是固定的，往数组中增加或者删除元素很麻烦，需要移动其他元素，而在javascript中不存在这个问题，直接用split()方法就可以了。所以，我们也可以直接用数组来实现邻接链表，但是，当你在实际应用中遇到数组很慢的时候，可以考虑实现下链表结构。
邻接矩阵 由一个|V| x |V| 的矩阵A构成 结构如下：
[ [0, 1, 1], [0, 0, 1], [0, 0, 0] ]  空间复杂度：o($$V^2$$)
优点：简单，在图的规模不大的时候尤其好用，对于无向图，邻接矩阵是对称矩阵，因此只需要占用一半的空间
缺点：存储空间消耗大，尤其在表示稀疏图的时候，浪费存储空间
图的遍历 深度优先搜索DFS 原理：
1.访问一个没有访问过的节点，将它标记为已访问
2.再递归地去访问初始节点的邻接链表中其他没有访问到的节点
示意图： 广度优先搜索BFS 原理：
1.查找与当前节点相邻的未访问的节点，将其添加到已访问节点列表和队列中
2.从图中取出下一个顶点v，添加到已访问的节点列表</description>
    </item>
    
  </channel>
</rss>